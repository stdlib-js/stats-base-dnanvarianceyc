{
  "version": 3,
  "sources": ["../lib/dnanvarianceyc.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array ignoring `NaN` values and using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657\u201365. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanvarianceyc( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction dnanvarianceyc( N, correction, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar nc;\n\tvar S;\n\tvar v;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ 0 ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += stride;\n\tsum = v;\n\tS = 0.0;\n\ti += 1;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\tsum += v;\n\t\t\td = (n*v) - sum;\n\t\t\tS += (1.0/(n*(n-1))) * d * d;\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn S / nc;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanvarianceyc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a double-precision floating-point strided array ignoring `NaN` values and using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657\u201365. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanvarianceyc( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction dnanvarianceyc( N, correction, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar nc;\n\tvar S;\n\tvar v;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ offset ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offset;\n\n\t// Find the first non-NaN element...\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tix += stride;\n\tsum = v;\n\tS = 0.0;\n\ti += 1;\n\tn = 1;\n\tfor ( i; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tn += 1;\n\t\t\tsum += v;\n\t\t\td = (n*v) - sum;\n\t\t\tS += (1.0/(n*(n-1))) * d * d;\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn S / nc;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanvarianceyc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dnanvarianceyc = require( './dnanvarianceyc.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dnanvarianceyc, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dnanvarianceyc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a double-precision floating-point strided array ignoring `NaN` values and using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* @module @stdlib/stats-base-dnanvarianceyc\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dnanvarianceyc = require( '@stdlib/stats-base-dnanvarianceyc' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = dnanvarianceyc( N, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var dnanvarianceyc = require( '@stdlib/stats-base-dnanvarianceyc' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = dnanvarianceyc.ndarray( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dnanvarianceyc;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdnanvarianceyc = main;\n} else {\n\tdnanvarianceyc = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dnanvarianceyc;\n\n// exports: { \"ndarray\": \"dnanvarianceyc.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAgDA,SAASC,EAAgBC,EAAGC,EAAYC,EAAGC,EAAS,CACnD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,MAAO,KAER,GAAKA,IAAM,GAAKG,IAAW,EAE1B,OADAK,EAAIN,EAAG,CAAE,EACJM,IAAMA,GAAKR,EAAEC,EAAa,EACvB,EAED,IAQR,IANKE,EAAS,EACbE,GAAM,EAAEL,GAAKG,EAEbE,EAAK,EAGAM,EAAI,EAAGA,EAAIX,IAChBQ,EAAIN,EAAGG,CAAG,EACLG,IAAMA,GAFQG,IAKnBN,GAAMF,EAEP,GAAKQ,IAAMX,EACV,MAAO,KAOR,IALAK,GAAMF,EACNC,EAAMI,EACND,EAAI,EACJI,GAAK,EACLD,EAAI,EACEC,EAAGA,EAAIX,EAAGW,IACfH,EAAIN,EAAGG,CAAG,EACLG,IAAMA,IACVE,GAAK,EACLN,GAAOI,EACPC,EAAKC,EAAEF,EAAKJ,EACZG,GAAM,GAAKG,GAAGA,EAAE,IAAOD,EAAIA,GAE5BJ,GAAMF,EAGP,OADAG,EAAKI,EAAIT,EACJK,GAAM,EACH,IAEDC,EAAID,CACZ,CAKAR,EAAO,QAAUC,IC7GjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAkDA,SAASC,EAAgBC,EAAGC,EAAYC,EAAGC,EAAQC,EAAS,CAC3D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,EACAC,EAEJ,GAAKX,GAAK,EACT,MAAO,KAER,GAAKA,IAAM,GAAKG,IAAW,EAE1B,OADAM,EAAIP,EAAGE,CAAO,EACTK,IAAMA,GAAKT,EAAEC,EAAa,EACvB,EAED,IAKR,IAHAK,EAAKF,EAGCO,EAAI,EAAGA,EAAIX,IAChBS,EAAIP,EAAGI,CAAG,EACLG,IAAMA,GAFQE,IAKnBL,GAAMH,EAEP,GAAKQ,IAAMX,EACV,MAAO,KAOR,IALAM,GAAMH,EACNE,EAAMI,EACND,EAAI,EACJG,GAAK,EACL,EAAI,EACEA,EAAGA,EAAIX,EAAGW,IACfF,EAAIP,EAAGI,CAAG,EACLG,IAAMA,IACV,GAAK,EACLJ,GAAOI,EACPC,EAAK,EAAED,EAAKJ,EACZG,GAAM,GAAK,GAAG,EAAE,IAAOE,EAAIA,GAE5BJ,GAAMH,EAGP,OADAI,EAAK,EAAIN,EACJM,GAAM,EACH,IAEDC,EAAID,CACZ,CAKAT,EAAO,QAAUC,IC5GjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAiB,IACjBC,EAAU,IAKdF,EAAaC,EAAgB,UAAWC,CAAQ,EAKhDH,EAAO,QAAUE,ICejB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAiBD,EAEjBC,EAAiBC,EAMlB,OAAO,QAAUD",
  "names": ["require_dnanvarianceyc", "__commonJSMin", "exports", "module", "dnanvarianceyc", "N", "correction", "x", "stride", "sum", "ix", "nc", "S", "v", "d", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "dnanvarianceyc", "N", "correction", "x", "stride", "offset", "sum", "ix", "nc", "S", "v", "d", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dnanvarianceyc", "ndarray", "join", "tryRequire", "isError", "main", "dnanvarianceyc", "tmp"]
}
